import logging
import asyncio
import time
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
   Application,
   CommandHandler,
   MessageHandler,
   CallbackQueryHandler,
   filters,
   ConversationHandler,
   ContextTypes,
)
from telegram.request import HTTPXRequest
from telegram.error import TimedOut, NetworkError
import pymongo
from bson import ObjectId
from telegram.helpers import escape_markdown

# Configure logging
logging.basicConfig(
   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
   level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot Configuration
TELEGRAM_TOKEN = "7804499616:AAEVIOp53iDe4byovz955E2wIhVZUgOyHMo"
MONGODB_URL = "mongodb+srv://Vlad:manreds7@cluster0.d0qnz.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"

# States
(GENDER, PURPOSE, NAME, AGE, AGE_RANGE, CITY,
INTERESTS, INSTAGRAM, MAIN_PHOTO, SELFIE_PHOTO, ADDITIONAL_PHOTO,
VIEWING_PROFILES, SETTINGS, MY_PROFILE, CONFIRM_RESTART,
CONFIRM_DELETE, CHANGE_PHOTO, CHANGE_BIO, EDIT_NAME, EDIT_AGE, EDIT_CITY,
EDIT_INTERESTS, EDIT_INSTAGRAM) = range(23)

class LikeSystem:
   def __init__(self, db, bot_instance):
       self.db = db
       self.likes = db.likes
       self.matches = db.matches
       self.users = db.users
       self.bot = bot_instance

   async def create_like(self, from_user_id, to_user_id):
       try:
           # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —ñ—Å–Ω—É—é—á–∏–π –ª–∞–π–∫
           existing_like = self.likes.find_one({
               "from_user": from_user_id,
               "to_user": to_user_id
           })

           if existing_like:
               return True, "–í–∏ –≤–∂–µ –ª–∞–π–∫–Ω—É–ª–∏ —Ü–µ–π –ø—Ä–æ—Ñ—ñ–ª—å ‚ù§Ô∏è"

           # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
           from_user = self.users.find_one({"user_id": from_user_id, "active": True})
           to_user = self.users.find_one({"user_id": to_user_id, "active": True})

           if not from_user or not to_user:
               logger.warning(f"Like between inactive profiles: from={from_user_id}, to={to_user_id}")
               return False, "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –ª–∞–π–∫. –ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π."

           # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ª–∞–π–∫—É
           like = {
               "from_user": from_user_id,
               "to_user": to_user_id,
               "created_at": datetime.now()
           }
           like_result = self.likes.insert_one(like)
           logger.info(f"New like created: {like_result.inserted_id}")

           # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫
           mutual_like = self.likes.find_one({
               "from_user": to_user_id,
               "to_user": from_user_id
           })

           if mutual_like:
               # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —ñ—Å–Ω—É—é—á–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π –º–∞—Ç—á, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—ñ–≤
               existing_match = self.matches.find_one({
                   "users": {"$all": [from_user_id, to_user_id]},
                   "active": True
               })

               if not existing_match:
                   # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç—á—É
                   match = {
                       "users": [from_user_id, to_user_id],
                       "created_at": datetime.now(),
                       "active": True
                   }
                   match_result = self.matches.insert_one(match)
                   logger.info(f"New match created: {match_result.inserted_id}")

                   # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ True –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–ø–æ–≤—ñ—â–µ–Ω—å, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—ñ–≤
                   result = True, "‚ú® –¶–µ –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫! ‚ú®\n–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è üíï"

                   # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫
                   asyncio.create_task(self.notify_match(from_user, to_user))
                   asyncio.create_task(self.notify_match(to_user, from_user))

                   return result
               else:
                   # –ú–∞—Ç—á –≤–∂–µ —ñ—Å–Ω—É—î - –ù–ï –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
                   return True, "‚ú® –¶–µ –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫! ‚ú®\n–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è üíï"

           return True, "–õ–∞–π–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ ‚ù§Ô∏è"
       except Exception as e:
           logger.error(f"Error in create_like: {e}")
           return False, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ª–∞–π–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."

   async def notify_match(self, user, matched_user):
       """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π –º–∞—Ç—á –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
       max_retries = 3
       retry_count = 0

       while retry_count < max_retries:
           try:
               # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
               profile_text = (
                   f"‚ú® –ù–û–í–ò–ô –ú–ê–¢–ß! ‚ú®\n\n"
                   f"–£ –≤–∞—Å –≤–∑–∞—î–º–Ω–∞ —Å–∏–º–ø–∞—Ç—ñ—è –∑:\n"
                   f"üë§ {matched_user['name']}, {matched_user['age']}\n"
                   f"üåÜ {matched_user['city']}\n"
                   f"üìù {matched_user['interests']}"
               )

               # –î–æ–¥–∞–≤–∞–Ω–Ω—è Instagram, —è–∫—â–æ —î
               if 'instagram' in matched_user and matched_user['instagram']:
                   profile_text += f"\n\nüì∏ Instagram: @{matched_user['instagram']}"

               # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç
               username = matched_user.get('username', '')
               if username:
                   contact_text = f"\n\nüîó –ü–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è: @{username}"
                   profile_text += contact_text
               else:
                   # –Ø–∫—â–æ –Ω–µ–º–∞—î username, –¥–æ–¥–∞—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
                   profile_text += "\n\n‚ö†Ô∏è –¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î username –≤ Telegram."
                   profile_text += f"\nID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {matched_user['user_id']}"

               # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
               if 'selfie_photo' in matched_user:
                   profile_text += "\n\n‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ —Ñ–æ—Ç–æ"
               else:
                   profile_text += "\n\n‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ —Ñ–æ—Ç–æ"

               # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
               keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ—ó –ø–∞—Ä–∏", callback_data="view_matches")]]
               reply_markup = InlineKeyboardMarkup(keyboard)

               # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑ –æ—Å–Ω–æ–≤–Ω–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—î—é –∞–±–æ –≤—ñ–¥–µ–æ
               media_sent = False

               if 'main_photo' in matched_user and matched_user['main_photo']:
                   try:
                       await self.bot.send_photo(
                           chat_id=user['user_id'],
                           photo=matched_user['main_photo'],
                           caption=profile_text,
                           reply_markup=reply_markup
                       )
                       media_sent = True
                   except Exception as e:
                       logger.error(f"Error sending match photo notification: {e}")
                       # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å–ø—Ä–æ–±–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏

               if not media_sent and 'main_video' in matched_user and matched_user['main_video']:
                   try:
                       await self.bot.send_video(
                           chat_id=user['user_id'],
                           video=matched_user['main_video'],
                           caption=profile_text,
                           reply_markup=reply_markup
                       )
                       media_sent = True
                   except Exception as e:
                       logger.error(f"Error sending match video notification: {e}")
                       # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å–ø—Ä–æ–±–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏

               if not media_sent:
                   # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º–µ–¥—ñ–∞, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                   await self.bot.send_message(
                       chat_id=user['user_id'],
                       text=profile_text,
                       reply_markup=reply_markup
                   )

               # –Ø–∫—â–æ –¥—ñ–π—à–ª–∏ —Å—é–¥–∏ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫, –∑–Ω–∞—á–∏—Ç—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
               logger.info(f"Match notification sent to user {user['user_id']}")
               return True

           except Exception as e:
               retry_count += 1
               logger.error(f"Error in notify_match (attempt {retry_count}): {e}")
               await asyncio.sleep(1)  # –ß–µ–∫–∞—î–º–æ —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é

       # –Ø–∫—â–æ –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –Ω–µ –≤–¥–∞–ª–∏—Å—è, —Ä–æ–±–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Å–ø—Ä–æ–±—É –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
       try:
           simple_text = f"‚ú® –£ –≤–∞—Å –Ω–æ–≤–∏–π –º–∞—Ç—á –∑ {matched_user.get('name', '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º')}! ‚ú®\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–æ–∑–¥—ñ–ª '–ú–æ—ó –ø–∞—Ä–∏'."
           await self.bot.send_message(
               chat_id=user['user_id'],
               text=simple_text
           )
           logger.info(f"Fallback match notification sent to user {user['user_id']}")
           return True
       except Exception as e:
           logger.error(f"Critical error in notify_match fallback: {e}")
           return False

class DatingBot:
   def __init__(self, token, db_url):
       self.token = token
       self.client = pymongo.MongoClient(db_url)
       self.db = self.client.dating_bot
       self.users = self.db.users
       self.likes = self.db.likes
       self.matches = self.db.matches
       self.bot = None  # –ë—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ
       self.like_system = None  # –ë—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ

       try:
           self.client.server_info()
           logger.info("Successfully connected to MongoDB")
       except Exception as e:
           logger.error(f"Failed to connect to MongoDB: {e}")
           raise

   def set_bot(self, bot):
       """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –ø—ñ—Å–ª—è –π–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è"""
       self.bot = bot
       self.like_system = LikeSystem(self.db, bot)

   async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ü–æ—á–∞—Ç–æ–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –æ—á–∏—â–µ–Ω–Ω—è–º –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –¥–∞–Ω–∏—Ö"""
       user_id = update.effective_user.id

       try:
           # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Å–µ—Å—ñ—ó –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è
           delete_time = datetime.now()

           # –í—ñ–¥–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ä—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ —è–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ, –∑–∞–º—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–Ω—è
           # –¶–µ –¥–æ–ø–æ–º–æ–∂–µ –∑–∞–ø–æ–±—ñ–≥—Ç–∏ –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ä–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –±–µ–∑ –≤—Ç—Ä–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—ó
           self.users.update_many(
               {"user_id": user_id},
               {"$set": {"active": False, "deleted_at": delete_time}}
           )

           # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –ª–∞–π–∫–∏ –≤—ñ–¥ —Ç–∞ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
           deleted_likes_from = self.likes.delete_many({"from_user": user_id})
           deleted_likes_to = self.likes.delete_many({"to_user": user_id})

           # –í—ñ–¥–º—ñ—á–∞—î–º–æ –≤—Å—ñ –º–∞—Ç—á—ñ –∑ —Ü–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —è–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ
           updated_matches = self.matches.update_many(
               {"users": {"$in": [user_id]}},
               {"$set": {"active": False, "deleted_at": delete_time}}
           )

           # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –æ–ø–µ—Ä–∞—Ü—ñ–π –æ—á–∏—â–µ–Ω–Ω—è
           logger.info(f"Auto-reset for user {user_id}: marked inactive profile, "
                      f"deleted {deleted_likes_from.deleted_count + deleted_likes_to.deleted_count} likes, "
                      f"marked inactive {updated_matches.modified_count} matches")

       except Exception as e:
           logger.error(f"Error during auto-reset in start command: {e}")

       # –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
       context.user_data.clear()

       # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ username –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –º–∞—Ç—á—ñ–≤
       user = update.effective_user
       if user.username:
           context.user_data['username'] = user.username

       # –ó–∞–≤–∂–¥–∏ –ø–æ—á–∏–Ω–∞—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑ –≤–∏–±–æ—Ä—É —Å—Ç–∞—Ç—ñ
       keyboard = [
           [KeyboardButton("–ß–æ–ª–æ–≤—ñ–∫")],
           [KeyboardButton("–ñ—ñ–Ω–∫–∞")]
       ]
       reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

       await update.message.reply_text(
           "–í—ñ—Ç–∞—î–º–æ! –î–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–∏–º–æ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å.\n"
           "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å:",
           reply_markup=reply_markup
       )
       return GENDER

   async def gender(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Å—Ç–∞—Ç—ñ"""
       gender = update.message.text
       context.user_data['gender'] = gender

       keyboard = [
           [KeyboardButton("–°—Ç–æ—Å—É–Ω–∫–∏ (–ø–æ–∫–∞–∑—É–≤–∞—Ç–∏–º–µ–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—ñ–± –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–æ—ó —Å—Ç–∞—Ç—ñ)")],
           [KeyboardButton("–î—Ä—É–∂–±–∞ (–ø–æ–∫–∞–∑—É–≤–∞—Ç–∏–º–µ–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—ñ–± —è–∫—ñ –æ–±—Ä–∞–ª–∏ –≤–∞—Ä—ñ–∞–Ω—Ç –¥—Ä—É–∂–±–∞)")]
       ]
       reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

       await update.message.reply_text(
           "–Ø–∫–∞ –º–µ—Ç–∞ –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞?",
           reply_markup=reply_markup
       )
       return PURPOSE

   async def purpose(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–µ—Ç–∏ –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞"""
       full_text = update.message.text

       # –í–∏—Ç—è–≥—É—î–º–æ –±–∞–∑–æ–≤—É –º–µ—Ç—É (–°—Ç–æ—Å—É–Ω–∫–∏/–î—Ä—É–∂–±–∞) –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –≤ –¥—É–∂–∫–∞—Ö
       if "(" in full_text:
           purpose = full_text.split("(")[0].strip()
       else:
           purpose = full_text.strip()

       context.user_data['purpose'] = purpose

       if purpose == "–°—Ç–æ—Å—É–Ω–∫–∏":
           if context.user_data['gender'] == "–ß–æ–ª–æ–≤—ñ–∫":
               context.user_data['looking_for'] = "–ñ—ñ–Ω–∫–∞"
           else:
               context.user_data['looking_for'] = "–ß–æ–ª–æ–≤—ñ–∫"
       else:
           context.user_data['looking_for'] = "–í—Å—ñ"

       await update.message.reply_text(
           "–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?",
           reply_markup=ReplyKeyboardRemove()
       )
       return NAME

   async def name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ"""
       context.user_data['name'] = update.message.text
       await update.message.reply_text("–°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤?")
       return AGE

   async def age(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–∫—É"""
       try:
           age = int(update.message.text)
           if age < 18:
               await update.message.reply_text("–í–∞–º –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 18 —Ä–æ–∫—ñ–≤.")
               return AGE
           context.user_data['age'] = age

           await update.message.reply_text(
               "–í–∫–∞–∂—ñ—Ç—å –≤—ñ–∫–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ—à—É–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 20-30):"
           )
           return AGE_RANGE
       except ValueError:
           await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
           return AGE

   async def age_range(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–∫–æ–≤–æ–≥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É"""
       try:
           min_age, max_age = map(int, update.message.text.split('-'))
           if min_age < 18 or max_age < min_age:
               await update.message.reply_text(
                   "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤—ñ–∫ - 18 —Ä–æ–∫—ñ–≤, "
                   "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –≤—ñ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –±—ñ–ª—å—à–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ."
               )
               return AGE_RANGE

           context.user_data['age_range'] = {'min': min_age, 'max': max_age}
           await update.message.reply_text("–í —è–∫–æ–º—É –º—ñ—Å—Ç—ñ –≤–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
           return CITY
       except ValueError:
           await update.message.reply_text(
               "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —É —Ñ–æ—Ä–º–∞—Ç—ñ: –º—ñ–Ω-–º–∞–∫—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 20-30)"
           )
           return AGE_RANGE

   async def city(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞"""
       context.user_data['city'] = update.message.text
       await update.message.reply_text("–†–æ–∑–∫–∞–∂—ñ—Ç—å –ø—Ä–æ —Å–µ–±–µ —Ç–∞ —Å–≤–æ—ó —ñ–Ω—Ç–µ—Ä–µ—Å–∏:")
       return INTERESTS

   async def interests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤"""
       context.user_data['interests'] = update.message.text

       keyboard = [[KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")]]
       reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

       await update.message.reply_text(
           "–í–∫–∞–∂—ñ—Ç—å –≤–∞—à Instagram (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'):",
           reply_markup=reply_markup
       )
       return INSTAGRAM

   async def instagram(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è Instagram"""
       text = update.message.text
       if text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
           # –û—á–∏—â–∞—î–º–æ –≤–≤–µ–¥–µ–Ω–∏–π –Ω—ñ–∫ –≤—ñ–¥ @ –Ω–∞ –ø–æ—á–∞—Ç–∫—É, —è–∫—â–æ —î
           if text.startswith('@'):
               insta_username = text[1:]
           else:
               insta_username = text

           context.user_data['instagram'] = insta_username

       # –ú–µ–Ω—é –≤–∏–±–æ—Ä—É –º—ñ–∂ —Ñ–æ—Ç–æ —ñ –≤—ñ–¥–µ–æ
       keyboard = [
           [KeyboardButton("–î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ")],
           [KeyboardButton("–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ")]
       ]
       reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

       await update.message.reply_text(
           "–î–æ–¥–∞–π—Ç–µ –≥–æ–ª–æ–≤–Ω–µ –º–µ–¥—ñ–∞ –¥–ª—è –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é:",
           reply_markup=reply_markup
       )

       return MAIN_PHOTO

   async def choose_media_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–í–∏–±—ñ—Ä —Ç–∏–ø—É –º–µ–¥—ñ–∞ (—Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ)"""
       text = update.message.text

       if text == "–î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ":
           await update.message.reply_text(
               "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—î –≥–æ–ª–æ–≤–Ω–µ —Ñ–æ—Ç–æ:",
               reply_markup=ReplyKeyboardRemove()
           )
           context.user_data['media_type'] = 'photo'
       elif text == "–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ":
           await update.message.reply_text(
               "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—î –≤—ñ–¥–µ–æ (–¥–æ 15 —Å–µ–∫—É–Ω–¥):",
               reply_markup=ReplyKeyboardRemove()
           )
           context.user_data['media_type'] = 'video'
       else:
           await update.message.reply_text(
               "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ."
           )
           return MAIN_PHOTO

       return MAIN_PHOTO

   async def main_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
       photo_file = await update.message.photo[-1].get_file()
       context.user_data['main_photo'] = photo_file.file_id

       # –í–∏–¥–∞–ª—è—î–º–æ –≤—ñ–¥–µ–æ, —è–∫—â–æ –≤–æ–Ω–æ –≤–∂–µ –±—É–ª–æ
       if 'main_video' in context.user_data:
           del context.user_data['main_video']

       # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–æ–≥–æ —Å–µ–ª—Ñ—ñ
       keyboard = [[KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é")]]
       reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

       await update.message.reply_text(
           "–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ! –¢–µ–ø–µ—Ä –∑—Ä–æ–±—ñ—Ç—å —Å–µ–ª—Ñ—ñ –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –ø—Ä–æ—Ñ—ñ–ª—é:",
           reply_markup=reply_markup
       )
       return SELFIE_PHOTO

   async def main_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–¥–µ–æ"""
       video_file = await update.message.video.get_file()
       context.user_data['main_video'] = video_file.file_id

       # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–æ—Ç–æ, —è–∫—â–æ –≤–æ–Ω–æ –≤–∂–µ –±—É–ª–æ
       if 'main_photo' in context.user_data:
           del context.user_data['main_photo']

       # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–æ–≥–æ —Å–µ–ª—Ñ—ñ
       keyboard = [[KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é")]]
       reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

       await update.message.reply_text(
           "–í—ñ–¥–µ–æ –¥–æ–¥–∞–Ω–æ! –¢–µ–ø–µ—Ä –∑—Ä–æ–±—ñ—Ç—å —Å–µ–ª—Ñ—ñ –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –ø—Ä–æ—Ñ—ñ–ª—é:",
           reply_markup=reply_markup
       )
       return SELFIE_PHOTO

   async def selfie_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–±—Ä–æ–±–∫–∞ —Å–µ–ª—Ñ—ñ"""
       photo_file = await update.message.photo[-1].get_file()
       context.user_data['selfie_photo'] = photo_file.file_id
       return await self.prompt_additional_photos(update)

   async def skip_selfie(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ü—Ä–æ–ø—É—Å–∫ —Å–µ–ª—Ñ—ñ"""
       return await self.prompt_additional_photos(update)

   async def prompt_additional_photos(self, update: Update):
       """–ó–∞–ø–∏—Ç –Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ–æ—Ç–æ"""
       keyboard = [
           [KeyboardButton("–î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ")],
           [KeyboardButton("–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ")],
           [KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é")]
       ]
       reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

       await update.message.reply_text(
           "–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ –¥–æ —Å–≤–æ—î—ó –∞–Ω–∫–µ—Ç–∏?",
           reply_markup=reply_markup
       )
       return ADDITIONAL_PHOTO

   async def additional_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–±—Ä–æ–±–∫–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ñ–æ—Ç–æ"""
       if 'additional_photos' not in context.user_data:
           context.user_data['additional_photos'] = []

       photo_file = await update.message.photo[-1].get_file()
       context.user_data['additional_photos'].append(photo_file.file_id)

       # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
       await update.message.reply_text("–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ! –ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –º–µ–¥—ñ–∞?")

       return await self.prompt_additional_photos(update)

   async def additional_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–±—Ä–æ–±–∫–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –≤—ñ–¥–µ–æ"""
       if 'additional_videos' not in context.user_data:
           context.user_data['additional_videos'] = []

       video_file = await update.message.video.get_file()
       context.user_data['additional_videos'].append(video_file.file_id)

       # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
       await update.message.reply_text("–í—ñ–¥–µ–æ –¥–æ–¥–∞–Ω–æ! –ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –º–µ–¥—ñ–∞?")

       return await self.prompt_additional_photos(update)

   async def handle_additional_photo_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –∞–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"""
       logger.info(f"Received message text: '{update.message.text}'")
       text = update.message.text

       if text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é":
           try:
               user_id = update.effective_user.id
               user_data = context.user_data.copy()
               user_data['user_id'] = user_id
               user_data['active'] = True  # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å —è–∫ –∞–∫—Ç–∏–≤–Ω–∏–π
               user_data['created_at'] = datetime.now()

               # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ username –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏ –º–∞—Ç—á–∞—Ö
               if update.effective_user.username:
                   user_data['username'] = update.effective_user.username

               # –°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–∑–Ω–∞—á–∞—î–º–æ –≤—Å—ñ —Å—Ç–∞—Ä—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ
               self.users.update_many(
                   {"user_id": user_id, "active": True},
                   {"$set": {"active": False, "deleted_at": datetime.now()}}
               )

               # –¢–µ–ø–µ—Ä —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
               result = self.users.insert_one(user_data)
               logger.info(f"Inserted new user with id: {result.inserted_id}")

               # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á—ñ—Ç–∫–∏–π —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –º—ñ–∂ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–¥–æ–º –∞–Ω–∫–µ—Ç
               divider = "=" * 30
               welcome_message = (
                   f"{divider}\n\n"
                   f"‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ\n\n"
                   f"–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –ø–µ—Ä–µ–≥–ª—è–¥ –∞–Ω–∫–µ—Ç —ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –Ω–æ–≤—ñ –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞.\n\n"
                   f"{divider}"
               )

               await update.message.reply_text(welcome_message)

               # –ù–æ–≤–µ –º–µ–Ω—é –∑ –µ–º–æ–¥–∑—ñ –∫–Ω–æ–ø–∫–∞–º–∏
               keyboard = [
                   [KeyboardButton("üë§ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏")],
                   [KeyboardButton("‚ù§Ô∏è –ú–æ—ó –ª–∞–π–∫–∏")],
                   [KeyboardButton("üìù –ú–æ—ó –ø–∞—Ä–∏")],
                   [KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
               ]
               reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

               await update.message.reply_text(
                   "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é:",
                   reply_markup=reply_markup
               )

               # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—É –∞–Ω–∫–µ—Ç—É –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
               # –©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑—Ä–æ–∑—É–º—ñ–≤, —è–∫ —Ü–µ –ø—Ä–∞—Ü—é—î
               return await self.handle_view_profiles(update, context)
           except Exception as e:
               logger.error(f"Error in completing registration: {e}")
               await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
               return ADDITIONAL_PHOTO
       elif text == "–î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ":
           await update.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ –æ–¥–Ω–µ —Ñ–æ—Ç–æ:")
           return ADDITIONAL_PHOTO
       elif text == "–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ":
           await update.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–µ–æ (–¥–æ 15 —Å–µ–∫—É–Ω–¥):")
           return ADDITIONAL_PHOTO
       else:
           await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ.")
           return ADDITIONAL_PHOTO

   async def view_likes(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ü–µ—Ä–µ–≥–ª—è–¥ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –ª–∞–π–∫—ñ–≤"""
       user_id = update.effective_user.id
       try:
           # –ó–∞–±–∏—Ä–∞—î–º–æ ReplyKeyboard –Ω–∞ —á–∞—Å –ø–æ–∫–∞–∑—É –ª–∞–π–∫—ñ–≤
           await update.message.reply_text(
               "–í–∞—à—ñ –ª–∞–π–∫–∏:",
               reply_markup=ReplyKeyboardRemove()
           )

           likes = list(self.likes.find({"to_user": user_id}))

           if not likes:
               await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –ª–∞–π–∫—ñ–≤.")
           else:
               for like in likes:
                   # –®—É–∫–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ
                   liker = self.users.find_one({"user_id": like['from_user'], "active": True})
                   if liker:
                       profile_text = (
                           f"üë§ {liker.get('name', '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á')}, {liker.get('age', '?')}\n"
                           f"üåÜ {liker.get('city', '–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ')}\n"
                           f"üìù {liker.get('interests', '–ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó')}"
                       )

                       # –î–æ–¥–∞—î–º–æ Instagram, —è–∫—â–æ —î
                       if 'instagram' in liker and liker['instagram']:
                           insta_username = liker['instagram']
                           profile_text += f"\nüì∏ Instagram: @{insta_username}"

                       # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
                       if 'selfie_photo' in liker:
                           profile_text += "\n\n‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ —Ñ–æ—Ç–æ"
                       else:
                           profile_text += "\n\n‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ —Ñ–æ—Ç–æ"

                       # –î–æ–¥–∞—î–º–æ —á–∞—Å, –∫–æ–ª–∏ –±—É–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π –ª–∞–π–∫
                       if 'created_at' in like:
                           like_time = like['created_at']
                           profile_text += f"\n\nüïí –õ–∞–π–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ: {like_time.strftime('%d.%m.%Y %H:%M')}"

                       # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ, —è–∫—â–æ —î
                       media_sent = False

                       if 'main_photo' in liker and liker['main_photo']:
                           try:
                               await update.message.reply_photo(liker['main_photo'], caption=profile_text)
                               media_sent = True
                           except Exception as e:
                               logger.error(f"Error sending liker photo: {e}")

                       if not media_sent and 'main_video' in liker and liker['main_video']:
                           try:
                               await update.message.reply_video(liker['main_video'], caption=profile_text)
                               media_sent = True
                           except Exception as e:
                               logger.error(f"Error sending liker video: {e}")

                       if not media_sent:
                           await update.message.reply_text(profile_text)

           # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è –ø–æ–∫–∞–∑—É –≤—Å—ñ—Ö –ª–∞–π–∫—ñ–≤
           keyboard = [
               [KeyboardButton("üë§ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏")],
               [KeyboardButton("‚ù§Ô∏è –ú–æ—ó –ª–∞–π–∫–∏")],
               [KeyboardButton("üìù –ú–æ—ó –ø–∞—Ä–∏")],
               [KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
           ]
           reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

           await update.message.reply_text(
               "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏:",
               reply_markup=reply_markup
           )
       except Exception as e:
           logger.error(f"Error viewing likes: {e}")
           await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–ª—è–¥—ñ –ª–∞–π–∫—ñ–≤.")

       return VIEWING_PROFILES

   async def view_matches(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ü–µ—Ä–µ–≥–ª—è–¥ –º–∞—Ç—á—ñ–≤ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º"""
       user_id = update.effective_user.id
       try:
           # –ó–∞–±–∏—Ä–∞—î–º–æ ReplyKeyboard –Ω–∞ —á–∞—Å –ø–æ–∫–∞–∑—É –º–∞—Ç—á—ñ–≤
           await update.message.reply_text(
               "–í–∞—à—ñ –ø–∞—Ä–∏:",
               reply_markup=ReplyKeyboardRemove()
           )

           # –®—É–∫–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ –º–∞—Ç—á—ñ
           matches = list(self.matches.find({
               "users": {"$in": [user_id]},
               "active": True
           }))

           if not matches:
               await update.message.reply_text(
                   "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø–∞—Ä. –ü–æ—á–Ω—ñ—Ç—å –ª–∞–π–∫–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—ñ, —â–æ–± –∑–Ω–∞–π—Ç–∏ –ø–∞—Ä—É!"
               )
           else:
               await update.message.reply_text(
                   f"–£ –≤–∞—Å {len(matches)} –ø–∞—Ä{'–∏' if 1 < len(matches) < 5 else ''}. "
                   f"–û—Å—å –≤—Å—ñ –≤–∞—à—ñ –º–∞—Ç—á—ñ:"
               )

               for match in matches:
                   try:
                       other_user_id = next((uid for uid in match['users'] if uid != user_id), None)
                       if not other_user_id:
                           continue

                       # –®—É–∫–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ
                       other_user = self.users.find_one({
                           "user_id": other_user_id,
                           "active": True
                       })

                       if not other_user:
                           # –Ø–∫—â–æ –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                           continue

                       profile_text = (
                           f"üë§ {other_user.get('name', '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á')}, {other_user.get('age', '?')}\n"
                           f"üåÜ {other_user.get('city', '–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ')}\n"
                           f"üìù {other_user.get('interests', '–ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó')}"
                       )

                       # –î–æ–¥–∞—î–º–æ Instagram, —è–∫—â–æ —î
                       if 'instagram' in other_user and other_user['instagram']:
                           insta_username = other_user['instagram']
                           profile_text += f"\nüì∏ Instagram: @{insta_username}"

                       # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
                       if 'selfie_photo' in other_user:
                           profile_text += "\n\n‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ —Ñ–æ—Ç–æ"
                       else:
                           profile_text += "\n\n‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ —Ñ–æ—Ç–æ"

                       # –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç, —è–∫—â–æ —î username
                       if 'username' in other_user and other_user['username']:
                           username = other_user['username']
                           profile_text += f"\n\nüîó –ö–æ–Ω—Ç–∞–∫—Ç: @{username}"
                       else:
                           profile_text += "\n\n‚ö†Ô∏è –£ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ username."
                           profile_text += f"\nID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {other_user['user_id']}"

                       # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Å –º–∞—Ç—á—É
                       match_time = match.get('created_at', datetime.now())
                       profile_text += f"\n\nüïí –ú–∞—Ç—á —Å—Ç–≤–æ—Ä–µ–Ω–æ: {match_time.strftime('%d.%m.%Y %H:%M')}"

                       # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ, —è–∫—â–æ —î
                       media_sent = False

                       if 'main_photo' in other_user and other_user['main_photo']:
                           try:
                               await update.message.reply_photo(other_user['main_photo'], caption=profile_text)
                               media_sent = True
                           except Exception as e:
                               logger.error(f"Error sending match photo: {e}")

                       if not media_sent and 'main_video' in other_user and other_user['main_video']:
                           try:
                               await update.message.reply_video(other_user['main_video'], caption=profile_text)
                               media_sent = True
                           except Exception as e:
                               logger.error(f"Error sending match video: {e}")

                       if not media_sent:
                           await update.message.reply_text(profile_text)
                   except Exception as e:
                       logger.error(f"Error processing match: {e}")
                       continue

           # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è –ø–æ–∫–∞–∑—É –≤—Å—ñ—Ö –º–∞—Ç—á—ñ–≤
           keyboard = [
               [KeyboardButton("üë§ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏")],
               [KeyboardButton("‚ù§Ô∏è –ú–æ—ó –ª–∞–π–∫–∏")],
               [KeyboardButton("üìù –ú–æ—ó –ø–∞—Ä–∏")],
               [KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
           ]
           reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

           await update.message.reply_text(
               "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏:",
               reply_markup=reply_markup
           )
       except Exception as e:
           logger.error(f"Error viewing matches: {e}")
           await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–ª—è–¥—ñ –ø–∞—Ä.")

           # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
           keyboard = [
               [KeyboardButton("üë§ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏")],
               [KeyboardButton("‚ù§Ô∏è –ú–æ—ó –ª–∞–π–∫–∏")],
               [KeyboardButton("üìù –ú–æ—ó –ø–∞—Ä–∏")],
               [KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
           ]
           reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

           await update.message.reply_text(
               "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
               reply_markup=reply_markup
           )

       return VIEWING_PROFILES

   async def settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
       keyboard = [
           [KeyboardButton("üíé –ü—Ä–µ–º—ñ—É–º –∞–∫–∞—É–Ω—Ç")],
           [KeyboardButton("üöÄ –ë—É—Å—Ç –∞–∫–∞—É–Ω—Ç—É")],
           [KeyboardButton("üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞")],
           [KeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É")],  # –î–æ–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
           [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
       ]
       reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

       await update.message.reply_text(
           "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:",
           reply_markup=reply_markup
       )
       return SETTINGS

   async def back_to_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
       keyboard = [
           [KeyboardButton("üë§ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏")],
           [KeyboardButton("‚ù§Ô∏è –ú–æ—ó –ª–∞–π–∫–∏")],
           [KeyboardButton("üìù –ú–æ—ó –ø–∞—Ä–∏")],
           [KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
       ]
       reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

       await update.message.reply_text(
           "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
           reply_markup=reply_markup
       )
       return VIEWING_PROFILES

   async def show_my_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ü–æ–∫–∞–∑ –≤–ª–∞—Å–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"""
       keyboard = [
           [KeyboardButton("üîÑ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æ")],
           [KeyboardButton("üì∏ –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ")],
           [KeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç–∏")],
           [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
       ]
       reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

       await update.message.reply_text(
           "–ú–æ—è –∞–Ω–∫–µ—Ç–∞ - –æ–ø—Ü—ñ—ó —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:",
           reply_markup=reply_markup
       )

       # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
       user_id = update.effective_user.id
       user = self.users.find_one({"user_id": user_id, "active": True})

       if user:
           profile_text = (
               f"üë§ {user.get('name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')}, {user.get('age', '?')}\n"
               f"üåÜ {user.get('city', '–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ')}\n"
               f"üéØ {user.get('purpose', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n\n"
               f"üìù {user.get('interests', '–ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó')}"
           )

           if 'instagram' in user and user['instagram']:
               profile_text += f"\n\nüì∏ Instagram: @{user['instagram']}"

           # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
           if 'selfie_photo' in user:
               profile_text += "\n\n‚úÖ –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Ñ–æ—Ç–æ"
           else:
               profile_text += "\n\n‚ö†Ô∏è –í–∏ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Ñ–æ—Ç–æ"

           # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ –ø—Ä–æ—Ñ—ñ–ª—é –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –Ω–∞ –ø–æ–º–∏–ª–∫–∏
           media_sent = False

           if 'main_photo' in user and user['main_photo']:
               try:
                   await update.message.reply_photo(
                       user['main_photo'],
                       caption=profile_text
                   )
                   media_sent = True
               except Exception as e:
                   logger.error(f"Error sending own profile photo: {e}")

           if not media_sent and 'main_video' in user and user['main_video']:
               try:
                   await update.message.reply_video(
                       user['main_video'],
                       caption=profile_text
                   )
                   media_sent = True
               except Exception as e:
                   logger.error(f"Error sending own profile video: {e}")

           if not media_sent:
               await update.message.reply_text(profile_text)

       return MY_PROFILE

   async def confirm_restart_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏"""
       keyboard = [
           [KeyboardButton("‚úÖ –¢–∞–∫, —Ö–æ—á—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∞–Ω–∫–µ—Ç—É")],
           [KeyboardButton("‚ùå –ù—ñ, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥")]
       ]
       reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

       await update.message.reply_text(
           "‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æ? –í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –∑–∞–º—ñ–Ω–µ–Ω—ñ.",
           reply_markup=reply_markup
       )

       return CONFIRM_RESTART

   async def change_profile_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ó–º—ñ–Ω–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
       keyboard = [
           [KeyboardButton("–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Ñ–æ—Ç–æ")],
           [KeyboardButton("–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –≤—ñ–¥–µ–æ")],
           [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
       ]
       reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

       await update.message.reply_text(
           "–û–±–µ—Ä—ñ—Ç—å, —â–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∑ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é:",
           reply_markup=reply_markup
       )

       return CHANGE_PHOTO

   async def handle_change_photo_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–ª—è –∑–º—ñ–Ω–∏ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ"""
       text = update.message.text

       if text == "–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Ñ–æ—Ç–æ":
           await update.message.reply_text(
               "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é:",
               reply_markup=ReplyKeyboardRemove()
           )
           context.user_data['changing_media'] = 'photo'
           return CHANGE_PHOTO
       elif text == "–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –≤—ñ–¥–µ–æ":
           await update.message.reply_text(
               "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–µ –≤—ñ–¥–µ–æ (–¥–æ 15 —Å–µ–∫—É–Ω–¥) –¥–ª—è –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é:",
               reply_markup=ReplyKeyboardRemove()
           )
           context.user_data['changing_media'] = 'video'
           return CHANGE_PHOTO
       elif text == "üîô –ù–∞–∑–∞–¥":
           return await self.show_my_profile(update, context)
       else:
           await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ.")
           return CHANGE_PHOTO

   async def update_profile_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
       user_id = update.effective_user.id

       try:
           photo_file = await update.message.photo[-1].get_file()
           file_id = photo_file.file_id

           # –û–Ω–æ–≤–ª—é—î–º–æ —Ñ–æ—Ç–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
           self.users.update_one(
               {"user_id": user_id, "active": True},
               {"$set": {"main_photo": file_id}, "$unset": {"main_video": ""}}
           )

           await update.message.reply_text(
               "–§–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ! ‚úÖ"
           )

           # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é –ø—Ä–æ—Ñ—ñ–ª—é
           return await self.show_my_profile(update, context)
       except Exception as e:
           logger.error(f"Error updating profile photo: {e}")
           await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ.")
           return await self.show_my_profile(update, context)

   async def update_profile_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–µ–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
       user_id = update.effective_user.id

       try:
           video_file = await update.message.video.get_file()
           file_id = video_file.file_id

           # –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–µ–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
           self.users.update_one(
               {"user_id": user_id, "active": True},
               {"$set": {"main_video": file_id}, "$unset": {"main_photo": ""}}
           )

           await update.message.reply_text(
               "–í—ñ–¥–µ–æ –ø—Ä–æ—Ñ—ñ–ª—é —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ! ‚úÖ"
           )

           # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é –ø—Ä–æ—Ñ—ñ–ª—é
           return await self.show_my_profile(update, context)
       except Exception as e:
           logger.error(f"Error updating profile video: {e}")
           await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–¥–µ–æ.")
           return await self.show_my_profile(update, context)

   async def change_bio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ó–º—ñ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ—Ñ—ñ–ª—é"""
       keyboard = [
           [KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è")],
           [KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –≤—ñ–∫")],
           [KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ")],
           [KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –æ–ø–∏—Å")],
           [KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ Instagram")],
           [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
       ]
       reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

       await update.message.reply_text(
           "–û–±–µ—Ä—ñ—Ç—å, —è–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:",
           reply_markup=reply_markup
       )

       return CHANGE_BIO

   async def edit_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ó–º—ñ–Ω–∞ —ñ–º–µ–Ω—ñ"""
       await update.message.reply_text(
           "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è:",
           reply_markup=ReplyKeyboardRemove()
       )
       return EDIT_NAME

   async def save_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —ñ–º–µ–Ω—ñ"""
       new_name = update.message.text
       user_id = update.effective_user.id

       self.users.update_one(
           {"user_id": user_id, "active": True},
           {"$set": {"name": new_name}}
       )

       await update.message.reply_text("–Ü–º'—è —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ! ‚úÖ")
       return await self.change_bio(update, context)

   async def edit_age(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ó–º—ñ–Ω–∞ –≤—ñ–∫—É"""
       await update.message.reply_text(
           "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –≤—ñ–∫:",
           reply_markup=ReplyKeyboardRemove()
       )
       return EDIT_AGE

   async def save_age(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –≤—ñ–∫—É"""
       try:
           new_age = int(update.message.text)
           if new_age < 18:
               await update.message.reply_text("–í–∞–º –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 18 —Ä–æ–∫—ñ–≤.")
               return EDIT_AGE

           user_id = update.effective_user.id
           self.users.update_one(
               {"user_id": user_id, "active": True},
               {"$set": {"age": new_age}}
           )

           await update.message.reply_text("–í—ñ–∫ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ! ‚úÖ")
           return await self.change_bio(update, context)
       except ValueError:
           await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
           return EDIT_AGE

   async def edit_city(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ó–º—ñ–Ω–∞ –º—ñ—Å—Ç–∞"""
       await update.message.reply_text(
           "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –º—ñ—Å—Ç–æ:",
           reply_markup=ReplyKeyboardRemove()
       )
       return EDIT_CITY

   async def save_city(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –º—ñ—Å—Ç–∞"""
       new_city = update.message.text
       user_id = update.effective_user.id

       self.users.update_one(
           {"user_id": user_id, "active": True},
           {"$set": {"city": new_city}}
       )

       await update.message.reply_text("–ú—ñ—Å—Ç–æ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ! ‚úÖ")
       return await self.change_bio(update, context)

   async def edit_interests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ó–º—ñ–Ω–∞ —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤"""
       await update.message.reply_text(
           "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å —Å–µ–±–µ —Ç–∞ —Å–≤–æ—ó—Ö —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤:",
           reply_markup=ReplyKeyboardRemove()
       )
       return EDIT_INTERESTS

   async def save_interests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤"""
       new_interests = update.message.text
       user_id = update.effective_user.id

       self.users.update_one(
           {"user_id": user_id, "active": True},
           {"$set": {"interests": new_interests}}
       )

       await update.message.reply_text("–û–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ! ‚úÖ")
       return await self.change_bio(update, context)

   async def edit_instagram(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ó–º—ñ–Ω–∞ Instagram"""
       await update.message.reply_text(
           "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π Instagram (–∞–±–æ '–í–∏–¥–∞–ª–∏—Ç–∏' —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏):",
           reply_markup=ReplyKeyboardRemove()
       )
       return EDIT_INSTAGRAM

   async def save_instagram(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ Instagram"""
       text = update.message.text
       user_id = update.effective_user.id

       if text.lower() == "–≤–∏–¥–∞–ª–∏—Ç–∏":
           self.users.update_one(
               {"user_id": user_id, "active": True},
               {"$unset": {"instagram": ""}}
           )
           await update.message.reply_text("Instagram –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ø—Ä–æ—Ñ—ñ–ª—é! ‚úÖ")
       else:
           # –û—á–∏—â–∞—î–º–æ –≤–≤–µ–¥–µ–Ω–∏–π –Ω—ñ–∫ –≤—ñ–¥ @ –Ω–∞ –ø–æ—á–∞—Ç–∫—É, —è–∫—â–æ —î
           if text.startswith('@'):
               insta_username = text[1:]
           else:
               insta_username = text

           self.users.update_one(
               {"user_id": user_id, "active": True},
               {"$set": {"instagram": insta_username}}
           )
           await update.message.reply_text("Instagram —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ! ‚úÖ")

       return await self.change_bio(update, context)

   async def confirm_delete_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
       keyboard = [
           [KeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏ –º—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")],
           [KeyboardButton("‚ùå –ù—ñ, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥")]
       ]
       reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

       await update.message.reply_text(
           "‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å? –¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞.\n\n"
           "–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å, –ª–∞–π–∫–∏ —Ç–∞ –º–∞—Ç—á—ñ –±—É–¥—É—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª–µ–Ω—ñ.",
           reply_markup=reply_markup
       )

       return CONFIRM_DELETE

   async def handle_restart_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏"""
       text = update.message.text

       if text == "‚úÖ –¢–∞–∫, —Ö–æ—á—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∞–Ω–∫–µ—Ç—É":
           # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∑–∞–Ω–æ–≤–æ
           await update.message.reply_text(
               "–ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏ –∑–∞–Ω–æ–≤–æ..."
           )
           return await self.start(update, context)
       else:
           # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
           return await self.show_my_profile(update, context)

   async def handle_delete_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏"""
       text = update.message.text

       if text == "‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏ –º—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å":
           user_id = update.effective_user.id

           try:
               # –í—ñ–¥–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å —è–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π –∑–∞–º—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–Ω—è
               updated_profile = self.users.update_many(
                   {"user_id": user_id},
                   {"$set": {"active": False, "deleted_at": datetime.now()}}
               )

               # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –ª–∞–π–∫–∏ –≤—ñ–¥ —Ç–∞ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
               deleted_likes_from = self.likes.delete_many({"from_user": user_id})
               deleted_likes_to = self.likes.delete_many({"to_user": user_id})

               # –í—ñ–¥–º—ñ—á–∞—î–º–æ –≤—Å—ñ –º–∞—Ç—á—ñ –∑ —Ü–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —è–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ
               updated_matches = self.matches.update_many(
                   {"users": {"$in": [user_id]}},
                   {"$set": {"active": False, "deleted_at": datetime.now()}}
               )

               # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –æ–ø–µ—Ä–∞—Ü—ñ–π
               logger.info(f"Delete profile for user {user_id}: marked inactive {updated_profile.modified_count} profile, "
                         f"deleted {deleted_likes_from.deleted_count + deleted_likes_to.deleted_count} likes, "
                         f"marked inactive {updated_matches.modified_count} matches")

               # –û—á–∏—â–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
               context.user_data.clear()

               # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
               await update.message.reply_text(
                   "üíî –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –≤–∏–¥–∞–ª–µ–Ω–æ. –©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
               )

               # –ó–∞–º—ñ–Ω—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∞ –ø—Ä–æ—Å—Ç—É –∫–Ω–æ–ø–∫—É /start
               keyboard = [
                   [KeyboardButton("/start")]
               ]
               reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

               await update.message.reply_text(
                   "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –∑–Ω–æ–≤—É:",
                   reply_markup=reply_markup
               )
           except Exception as e:
               logger.error(f"Error deleting profile: {e}")
               await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.")

           return ConversationHandler.END
       else:
           # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
           await update.message.reply_text("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
           return await self.settings(update, context)

   async def handle_view_profiles(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –∑ InlineKeyboardMarkup –∑–∞–º—ñ—Å—Ç—å ReplyKeyboardMarkup"""
       user_id = update.effective_user.id
       try:
           # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –±–∞–∑—ñ
           user = self.users.find_one({"user_id": user_id, "active": True})
           if not user:
               await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.")
               return VIEWING_PROFILES

           # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
           logger.info(f"Looking for profiles for user {user_id} with purpose: {user.get('purpose', 'Not specified')}")

           # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫–∏—Ö –≤–∂–µ –ª–∞–π–∫–Ω—É–ª–∏
           liked_users_cursor = self.likes.find({"from_user": user_id})
           viewed_profiles = [like['to_user'] for like in liked_users_cursor]
           viewed_profiles.append(user_id)  # –î–æ–¥–∞—î–º–æ –≤–ª–∞—Å–Ω–∏–π ID

           # –ü–æ–±—É–¥–æ–≤–∞ –±–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É - –ª–∏—à–µ –∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ
           base_query = {
               "user_id": {"$nin": viewed_profiles},
               "active": True,  # –õ–∏—à–µ –∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ
               "name": {"$exists": True},
               "age": {"$exists": True}
           }

           # –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –∑–∞ –º–µ—Ç–æ—é –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞ —Ç–∞ —Å—Ç–∞—Ç—Ç—é
           if user.get('purpose') == "–°—Ç–æ—Å—É–Ω–∫–∏" and user.get('looking_for') != "–í—Å—ñ":
               base_query["gender"] = user.get('looking_for')
           elif user.get('purpose') == "–î—Ä—É–∂–±–∞":
               # –î–ª—è –¥—Ä—É–∂–±–∏ –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–∏—Ö, —Ö—Ç–æ —Ç–µ–∂ —à—É–∫–∞—î –¥—Ä—É–∂–±—É
               base_query["purpose"] = "–î—Ä—É–∂–±–∞"

           # –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –∑–∞ –≤—ñ–∫–æ–≤–∏–º –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º, —è–∫—â–æ –≤—ñ–Ω –≤–∫–∞–∑–∞–Ω–∏–π
           if 'age_range' in user:
               min_age = user['age_range'].get('min', 18)
               max_age = user['age_range'].get('max', 100)
               base_query["age"] = {"$gte": min_age, "$lte": max_age}

           # –ü–æ—à—É–∫ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ–≥–æ –º–∞—Ç—á—É
           potential_match = self.users.find_one(base_query)

           # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, —Å–ø—Ä–æ–±—É—î–º–æ —Å–ø—Ä–æ—Å—Ç–∏—Ç–∏ —É–º–æ–≤–∏ –ø–æ—à—É–∫—É
           if not potential_match:
               logger.info("No profiles found with full criteria, simplifying search...")
               # –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –±–∞–∑–æ–≤—ñ —É–º–æ–≤–∏ —ñ –≤–∏–¥–∞–ª—è—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
               simplified_query = {
                   "user_id": {"$nin": viewed_profiles},
                   "active": True,  # –í—Å–µ –æ–¥–Ω–æ —à—É–∫–∞—î–º–æ –ª–∏—à–µ –∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ
                   "name": {"$exists": True}
               }
               potential_match = self.users.find_one(simplified_query)

           # –Ø–∫—â–æ –≤—Å–µ —â–µ –Ω–µ –∑–Ω–∞–π—à–ª–∏, —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –±—É–¥—å-—è–∫–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
           if not potential_match:
               logger.info("No profiles found with basic criteria, searching any active user...")
               potential_match = self.users.find_one({
                   "user_id": {"$ne": user_id},
                   "active": True
               })

           # –Ø–∫—â–æ –≤—Å–µ —â–µ –Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
           if not potential_match:
               logger.info("No profiles found at all")
               await update.message.reply_text(
                   "–ù–∞ –∂–∞–ª—å, –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î –Ω–æ–≤–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!"
               )

               # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
               keyboard = [
                   [KeyboardButton("üë§ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏")],
                   [KeyboardButton("‚ù§Ô∏è –ú–æ—ó –ª–∞–π–∫–∏")],
                   [KeyboardButton("üìù –ú–æ—ó –ø–∞—Ä–∏")],
                   [KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
               ]
               reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
               await update.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=reply_markup)

               return VIEWING_PROFILES

           # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–∞—î –ø—Ä–æ—Ñ—ñ–ª—å –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è
           if 'user_id' not in potential_match:
               logger.warning(f"Found profile without user_id field: {potential_match}")
               await update.message.reply_text(
                   "–ù–∞ –∂–∞–ª—å, –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –∞–Ω–∫–µ—Ç–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!"
               )
               return VIEWING_PROFILES

           logger.info(f"Found potential match: {potential_match.get('name', 'Unknown')}")

           # –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–ª—ñ–≤
           profile_text = (
               f"üë§ {potential_match.get('name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')}, {potential_match.get('age', '?')}\n"
               f"üåÜ {potential_match.get('city', '–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ')}\n"
           )

           # –î–æ–¥–∞—î–º–æ –º–µ—Ç—É, —è–∫—â–æ —î
           if 'purpose' in potential_match:
               profile_text += f"üéØ {potential_match['purpose']}\n\n"
           else:
               profile_text += f"üéØ –ù–µ –≤–∫–∞–∑–∞–Ω–æ\n\n"

           # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–µ—Å–∏, —è–∫—â–æ —î
           if 'interests' in potential_match and potential_match['interests']:
               profile_text += f"üìù {potential_match['interests']}"
           else:
               profile_text += "üìù –ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"

           # –î–æ–¥–∞—î–º–æ Instagram, —è–∫—â–æ —î
           if 'instagram' in potential_match and potential_match['instagram']:
               profile_text += f"\n\nüì∏ Instagram: @{potential_match['instagram']}"

           # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
           if 'selfie_photo' in potential_match:
               profile_text += "\n\n‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ —Ñ–æ—Ç–æ"
           else:
               profile_text += "\n\n‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ —Ñ–æ—Ç–æ"

           # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∞–Ω–∫–µ—Ç–∏
           await update.message.reply_text(
               "–ó–Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∫–µ—Ç—É:",
               reply_markup=ReplyKeyboardRemove()
           )

           # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –º–µ–¥—ñ–∞ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –Ω–∞ –ø–æ–º–∏–ª–∫–∏
           media_sent = False

           # –°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ —Ñ–æ—Ç–æ
           if 'main_photo' in potential_match and potential_match['main_photo']:
               try:
                   await update.message.reply_photo(
                       potential_match['main_photo'],
                       caption=profile_text
                   )
                   media_sent = True
               except Exception as e:
                   logger.error(f"Error sending profile main photo: {e}")

           # –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏, –ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–µ–æ
           if not media_sent and 'main_video' in potential_match and potential_match['main_video']:
               try:
                   await update.message.reply_video(
                       potential_match['main_video'],
                       caption=profile_text
                   )
                   media_sent = True
               except Exception as e:
                   logger.error(f"Error sending profile main video: {e}")

           # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω—ñ —Ñ–æ—Ç–æ, –Ω—ñ –≤—ñ–¥–µ–æ
           if not media_sent:
               await update.message.reply_text(profile_text)

           # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ–æ—Ç–æ, —è–∫—â–æ —î
           if 'additional_photos' in potential_match and potential_match['additional_photos']:
               media_group = []

               for photo_id in potential_match['additional_photos']:
                   try:
                       if photo_id:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ ID –Ω–µ –ø—É—Å—Ç–∏–π
                           media_group.append(InputMediaPhoto(photo_id))
                   except Exception as e:
                       logger.error(f"Error adding photo to media group: {e}")

               if media_group:
                   try:
                       await update.message.reply_media_group(media_group)
                   except Exception as e:
                       logger.error(f"Error sending media group: {e}")

           # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –≤—ñ–¥–µ–æ –æ–∫—Ä–µ–º–æ, —è–∫—â–æ —î
           if 'additional_videos' in potential_match and potential_match['additional_videos']:
               for video_id in potential_match['additional_videos']:
                   try:
                       if video_id:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ ID –Ω–µ –ø—É—Å—Ç–∏–π
                           await update.message.reply_video(video_id)
                   except Exception as e:
                       logger.error(f"Error sending additional video: {e}")

           # –ó–∞–º—ñ–Ω—é—î–º–æ –∑–≤–∏—á–∞–π–Ω—ñ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (–ø—ñ–¥ –∞–Ω–∫–µ—Ç–æ—é)
           keyboard = [
               [
                   InlineKeyboardButton("‚ù§Ô∏è", callback_data=f"like_{potential_match['user_id']}"),
                   InlineKeyboardButton("üíå", callback_data=f"message_{potential_match['user_id']}"),
                   InlineKeyboardButton("‚û°Ô∏è", callback_data="next")
               ]
           ]
           reply_markup = InlineKeyboardMarkup(keyboard)

           # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –≤ context
           context.user_data['current_profile_id'] = potential_match['user_id']

           # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∑ –¥—ñ—î—é
           await update.message.reply_text(
               "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
               reply_markup=reply_markup
           )

       except Exception as e:
           logger.error(f"Error viewing profiles: {e}")
           await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–ª—è–¥—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤.")

           # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
           keyboard = [
               [KeyboardButton("üë§ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏")],
               [KeyboardButton("‚ù§Ô∏è –ú–æ—ó –ª–∞–π–∫–∏")],
               [KeyboardButton("üìù –ú–æ—ó –ø–∞—Ä–∏")],
               [KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
           ]
           reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
           await update.message.reply_text("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:", reply_markup=reply_markup)

       return VIEWING_PROFILES

   async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """–û–±—Ä–æ–±–∫–∞ callback-–∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫"""
       query = update.callback_query

       try:
           # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ callback, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ "–≥–æ–¥–∏–Ω–Ω–∏–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"
           await query.answer()

           if query.data == "view_matches":
               # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É –º–∞—Ç—á—ñ–≤
               await query.message.reply_text("–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∞—à–∏—Ö –ø–∞—Ä...")
               return await self.view_matches(update, context)

           elif query.data.startswith('like_'):
               user_id = int(query.data.split('_')[1])
               # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É —Å—Ç–∞–≤–∏–º–æ –ª–∞–π–∫
               success, message = await self.like_system.create_like(
                   query.from_user.id,
                   user_id
               )
               # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
               await query.message.reply_text(message)

               # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É –∞–Ω–∫–µ—Ç—É –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
               if "–≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫" in message:
                   # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ø—ñ—Å–ª—è –≤–∑–∞—î–º–Ω–æ–≥–æ –ª–∞–π–∫—É
                   keyboard = [
                       [KeyboardButton("üë§ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏")],
                       [KeyboardButton("‚ù§Ô∏è –ú–æ—ó –ª–∞–π–∫–∏")],
                       [KeyboardButton("üìù –ú–æ—ó –ø–∞—Ä–∏")],
                       [KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
                   ]
                   reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                   await query.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=reply_markup)
                   return VIEWING_PROFILES
               else:
                   # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É –∞–Ω–∫–µ—Ç—É –ø—ñ—Å–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –ª–∞–π–∫—É
                   return await self.handle_view_profiles(update, context)

           elif query.data.startswith('message_'):
               user_id = int(query.data.split('_')[1])
               user = self.users.find_one({"user_id": user_id, "active": True})

               if user and 'username' in user and user['username']:
                   username = user['username']
                   message = f"–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É @{username}"
                   await query.message.reply_text(message)
               else:
                   await query.message.reply_text(
                       "–ù–∞ –∂–∞–ª—å, —É —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ username –≤ Telegram."
                   )

               # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
               keyboard = [
                   [KeyboardButton("üë§ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏")],
                   [KeyboardButton("‚ù§Ô∏è –ú–æ—ó –ª–∞–π–∫–∏")],
                   [KeyboardButton("üìù –ú–æ—ó –ø–∞—Ä–∏")],
                   [KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
               ]
               reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
               await query.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=reply_markup)
               return VIEWING_PROFILES

           elif query.data == "next":
               # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É –∞–Ω–∫–µ—Ç—É
               return await self.handle_view_profiles(update, context)

           else:
               # –ù–µ–≤—ñ–¥–æ–º–∏–π callback
               keyboard = [
                   [KeyboardButton("üë§ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏")],
                   [KeyboardButton("‚ù§Ô∏è –ú–æ—ó –ª–∞–π–∫–∏")],
                   [KeyboardButton("üìù –ú–æ—ó –ø–∞—Ä–∏")],
                   [KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
               ]
               reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
               await query.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=reply_markup)
               return VIEWING_PROFILES

       except Exception as e:
           logger.error(f"General error in handle_callback_query: {e}")
           try:
               # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
               keyboard = [
                   [KeyboardButton("üë§ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏")],
                   [KeyboardButton("‚ù§Ô∏è –ú–æ—ó –ª–∞–π–∫–∏")],
                   [KeyboardButton("üìù –ú–æ—ó –ø–∞—Ä–∏")],
                   [KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
               ]
               reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

               await query.message.reply_text(
                   "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
                   reply_markup=reply_markup
               )
           except Exception:
               pass  # –Ø–∫—â–æ –Ω–∞–≤—ñ—Ç—å —Ü–µ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ, –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ
           return VIEWING_PROFILES

def main():
   # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –∑–∞–ø–∏—Ç—É –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
   request = HTTPXRequest(
       connect_timeout=30.0,
       read_timeout=30.0,
       write_timeout=30.0
   )

   # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
   bot_handler = DatingBot(TELEGRAM_TOKEN, MONGODB_URL)

   # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è application –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
   application = Application.builder().token(TELEGRAM_TOKEN).request(request).build()

   # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è LikeSystem
   bot_handler.set_bot(application.bot)

   # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Ä–æ–∑–º–æ–≤–∏
   conv_handler = ConversationHandler(
       entry_points=[CommandHandler('start', bot_handler.start)],
       states={
           GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.gender)],
           PURPOSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.purpose)],
           NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.name)],
           AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.age)],
           AGE_RANGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.age_range)],
           CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.city)],
           INTERESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.interests)],
           INSTAGRAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.instagram)],
           MAIN_PHOTO: [
               MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.choose_media_type),
               MessageHandler(filters.PHOTO, bot_handler.main_photo),
               MessageHandler(filters.VIDEO, bot_handler.main_video)
           ],
           SELFIE_PHOTO: [
               MessageHandler(filters.PHOTO, bot_handler.selfie_photo),
               MessageHandler(filters.Regex('^–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é$'), bot_handler.skip_selfie)
           ],
           ADDITIONAL_PHOTO: [
               MessageHandler(filters.PHOTO, bot_handler.additional_photo),
               MessageHandler(filters.VIDEO, bot_handler.additional_video),
               MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.handle_additional_photo_choice)
           ],
           VIEWING_PROFILES: [
               MessageHandler(filters.Regex('^üë§ –î–∏–≤–∏—Ç–∏—Å—å –∞–Ω–∫–µ—Ç–∏$'), bot_handler.handle_view_profiles),
               MessageHandler(filters.Regex('^‚ù§Ô∏è –ú–æ—ó –ª–∞–π–∫–∏$'), bot_handler.view_likes),
               MessageHandler(filters.Regex('^üìù –ú–æ—ó –ø–∞—Ä–∏$'), bot_handler.view_matches),
               MessageHandler(filters.Regex('^‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è$'), bot_handler.settings)
               # –í–∏–¥–∞–ª–µ–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –µ–º–æ–¥–∑—ñ-–∫–Ω–æ–ø–æ–∫, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ —Ç–µ–ø–µ—Ä InlineKeyboardButton
           ],
           SETTINGS: [
               MessageHandler(filters.Regex('^üíé –ü—Ä–µ–º—ñ—É–º –∞–∫–∞—É–Ω—Ç$'), lambda update, context: bot_handler.back_to_main_menu(update, context)),
               MessageHandler(filters.Regex('^üöÄ –ë—É—Å—Ç –∞–∫–∞—É–Ω—Ç—É$'), lambda update, context: bot_handler.back_to_main_menu(update, context)),
               MessageHandler(filters.Regex('^üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞$'), bot_handler.show_my_profile),
               MessageHandler(filters.Regex('^üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É$'), bot_handler.confirm_delete_profile),
               MessageHandler(filters.Regex('^üîô –ù–∞–∑–∞–¥$'), bot_handler.back_to_main_menu)
           ],
           MY_PROFILE: [
               MessageHandler(filters.Regex('^üîÑ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æ$'), bot_handler.confirm_restart_profile),
               MessageHandler(filters.Regex('^üì∏ –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ$'), bot_handler.change_profile_photo),
               MessageHandler(filters.Regex('^‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç–∏$'), bot_handler.change_bio),
               MessageHandler(filters.Regex('^üîô –ù–∞–∑–∞–¥$'), bot_handler.settings)
           ],
           CONFIRM_RESTART: [
               MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.handle_restart_confirmation)
           ],
           CONFIRM_DELETE: [
               MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.handle_delete_confirmation)
           ],
           CHANGE_PHOTO: [
               MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.handle_change_photo_choice),
               MessageHandler(filters.PHOTO, bot_handler.update_profile_photo),
               MessageHandler(filters.VIDEO, bot_handler.update_profile_video)
           ],
           CHANGE_BIO: [
               MessageHandler(filters.Regex('^–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º\'—è$'), bot_handler.edit_name),
               MessageHandler(filters.Regex('^–ó–º—ñ–Ω–∏—Ç–∏ –≤—ñ–∫$'), bot_handler.edit_age),
               MessageHandler(filters.Regex('^–ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ$'), bot_handler.edit_city),
               MessageHandler(filters.Regex('^–ó–º—ñ–Ω–∏—Ç–∏ –æ–ø–∏—Å$'), bot_handler.edit_interests),
               MessageHandler(filters.Regex('^–ó–º—ñ–Ω–∏—Ç–∏ Instagram$'), bot_handler.edit_instagram),
               MessageHandler(filters.Regex('^üîô –ù–∞–∑–∞–¥$'), bot_handler.show_my_profile)
           ],
           EDIT_NAME: [
               MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.save_name)
           ],
           EDIT_AGE: [
               MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.save_age)
           ],
           EDIT_CITY: [
               MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.save_city)
           ],
           EDIT_INTERESTS: [
               MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.save_interests)
           ],
           EDIT_INSTAGRAM: [
               MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.save_instagram)
           ]
       },
       fallbacks=[CommandHandler('start', bot_handler.start)]
   )

   # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
   application.add_handler(conv_handler)
   application.add_handler(CallbackQueryHandler(bot_handler.handle_callback_query))

   # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
   logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

   max_retries = 5
   retry_count = 0

   while retry_count < max_retries:
       try:
           application.run_polling()
           break
       except (TimedOut, NetworkError) as e:
           retry_count += 1
           logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ: {e}. –°–ø—Ä–æ–±–∞ {retry_count} –∑ {max_retries}")
           time.sleep(5)  # –ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ—é —Å–ø—Ä–æ–±–æ—é

if __name__ == '__main__':
   main()
